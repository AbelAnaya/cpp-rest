openapi: 3.0.3
info:
  title: HTTP RESTful API Device Management
  description:
    This is a RESTful API service intented to manage device metadata in a factory floor. The API specification has been
    implemented following OpenAPI 3.0 specification.
  
  version: 0.0.1

paths:
  /devices:
    get:
      tags:
        - devices
      summary: Lists existing devices
      description: Lists existing devices
      parameters:
        - name: name
          in: query
          description: Device name filter for query.
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Device type filter for query.
          required: false
          schema:
            type: string
            enum:
              - Sensor
              - Actuator
        - name: creationDateStart
          in: query
          description: Device creation date filter for query.
          required: false
          schema:
            type: integer
            format: int32
        - name: creationDateEnd
          in: query
          description: Device creation date filter for query.
          required: false
          schema:
            type: integer
            format: int32
        - name: locationId
          in: query
          description: Location identifier filter for query.
          required: false
          schema:
            type: integer
            format: int16
        - name: locationName
          in: query
          description: Device location name filter for query.
          required: false
          schema:
            type: string
        - name: locationType
          in: query
          description: Location type filter for query.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devices-get'
        '400':
          description: Invalid filter
        '404':
          description: Device not found

    post:
      tags:
        - devices
      summary: Creates or update a device
      description: Creates or updates a device
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/devices-post'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input

  /devices/{serialNumber}:
    get:
      tags:
        - devices
      summary: Finds device by ID
      description: Returns a single device
      parameters:
        - name: serialNumber
          in: path
          description: ID of device to return
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devices-get'
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found

    delete:
      tags:
        - devices
      summary: Deletes a device
      description: Deletes a device from the database
      parameters:
        - name: serialNumber
          in: path
          description: Serial Number of device to delete
          required: true
          schema:
            type: integer
            format: int16 
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '403':
          description: Device is linked to a location, first remove relation and then remove device
        '404':
          description: Device not found

  /devices/{serialNumber}/location:
    put:
      tags:
        - devices
      summary: Updates a device location in the database
      description: Updates a device location in the database
      parameters:
        - name: serialNumber
          in: path
          description: Serial Number of device to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/devices-put'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found

components:
  schemas:
    devices-put:
      type: object
      properties:
        location_name:
          type: string
          example: Building A

    devices-post:
      required:
        - serialNumber
      type: object
      properties:
        serialNumber:
          type: integer
          format: int16
          example: 48356
        name:
          type: string
          example: XLN3 Light Sensor
        type:
          type: string
          description: Type of device
          enum:
            - Sensor
            - Actuator

    devices-get:
      required:
        - serialNumber
        - name
        - type
        - creationDate
      type: object
      properties:
        serialNumber:
          type: integer
          format: int16
          example: 48356
        name:
          type: string
          example: XLN3 Light Sensor
        type:
          type: string
          description: Type of device
          enum:
            - Sensor
            - Actuator
        creationDate:
          type: string
          description: Date of device creation
          example: "2024-04-02 14:39:45"


